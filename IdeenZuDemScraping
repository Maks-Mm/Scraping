Es scheint, dass du ein System brauchst, das Aufgaben wie das Prüfen und Aktualisieren von Daten, das Entfernen von doppelten Einträgen und andere automatisierte Prozesse übernimmt. Basierend auf deiner Beschreibung und der package.json-Datei, könnte man ein Skript erstellen, das diese Aufgaben in einer Automatisierungs-Pipeline zusammenfasst.

Hier ist eine mögliche Herangehensweise:
Schritt 1: Hauptautomatisierungsskript erstellen

Erstelle ein neues Skript namens automation.js, das die verschiedenen Aufgaben koordiniert.

import { exec } from "child_process";

// Utility-Funktion zum Ausführen von Befehlen
const runCommand = (command) => {
  return new Promise((resolve, reject) => {
    exec(command, (error, stdout, stderr) => {
      if (error) {
        console.error(`Fehler bei ${command}:`, error.message);
        reject(stderr);
        return;
      }
      console.log(`Erfolg bei ${command}:\n`, stdout);
      resolve(stdout);
    });
  });
};

// Automatisierungsschritte definieren
const automate = async () => {
  try {
    console.log("1. Aktualisieren der Liste...");
    await runCommand("npm run refresh-list");

    console.log("2. Artikel scrapen...");
    await runCommand("npm run get-article");

    console.log("3. AI-Analyse starten...");
    await runCommand("npm run ai");

    console.log("4. Aufräumen von Duplikaten...");
    await runCommand("npm run clean-up");

    console.log("Automatisierung abgeschlossen!");
  } catch (error) {
    console.error("Fehler bei der Automatisierung:", error);
  }
};

// Automatisierung starten
automate();

Schritt 2: Anpassung in package.json

Füge einen neuen Befehl hinzu, der das Hauptskript automation.js ausführt:

"scripts": {
  "automate": "node automation.js",
  "refresh-list": "node utils/blg-list-scraping.js",
  "get-article": "node utils/article-scraper.js",
  "ai": "node utils/gemini-1.5-flash.js",
  "ai-full": "node utils/gemini-ai-full.js",
  "clean-up": "node utils/remove-article-duplicates.js"
}

Schritt 3: Zusätzliche Verbesserungen
1. Automatische Prüfung und Löschung neuer Daten

In utils/article-scraper.js könntest du Logik einbauen, die neue Daten mit bestehenden Daten in einer MongoDB-Datenbank (über Mongoose) oder einer JSON-Datei vergleicht und nur neue Daten speichert. Du könntest beispielsweise Duplikate basierend auf eindeutigen Identifikatoren wie Artikel-IDs oder URLs überprüfen.
2. Zeitgesteuerte Automatisierung

Wenn du die Automatisierung regelmäßig ausführen möchtest, kannst du cron-Jobs oder node-schedule verwenden.

Beispiel mit node-schedule:

import schedule from 'node-schedule';
import { automate } from './automation.js';

schedule.scheduleJob('0 * * * *', () => {
  console.log("Starte Automatisierung...");
  automate();
});

3. Protokollierung und Fehlerüberwachung

Implementiere eine Protokollierung, um sicherzustellen, dass du die Ausführung verfolgen und Fehler beheben kannst:

    Verwende eine Bibliothek wie winston für strukturiertes Logging.
    Speichere Logs in einer Datei für spätere Überprüfungen.

Mit diesem Setup kannst du ein effizientes und automatisiertes System erstellen, das Daten sammelt, verarbeitet und regelmäßig prüft, um die Datenqualität sicherzustellen.
